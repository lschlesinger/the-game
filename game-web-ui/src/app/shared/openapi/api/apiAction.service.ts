/**
 * The Game - Endangered Nature Edition, built with Apodini
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Action } from '../model/action';
import { GameResponse } from '../model/gameResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ApiActionService {

    protected basePath = '';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Adds the requesting player to players of the game having the id given in path.
     * @param gameId @Parameter var gameId: String
     * @param playerId @Parameter var playerId: String
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public joinGame(gameId: string, playerId?: string, observe?: 'body', reportProgress?: boolean): Observable<GameResponse>;
    public joinGame(gameId: string, playerId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GameResponse>>;
    public joinGame(gameId: string, playerId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GameResponse>>;
    public joinGame(gameId: string, playerId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling joinGame.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (playerId !== undefined && playerId !== null) {
            queryParameters = queryParameters.set('playerId', <any>playerId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GameResponse>('put',`${this.basePath}/v1/game/${encodeURIComponent(String(gameId))}/join`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * For the game having the id given in path, the action of passing to the next player is triggered: If preconditions are fulfilled, new hand cards are drawn up and the player whose turn it is next is chosen.
     * @param gameId @Parameter var gameId: String
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public passGame(gameId: string, observe?: 'body', reportProgress?: boolean): Observable<GameResponse>;
    public passGame(gameId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GameResponse>>;
    public passGame(gameId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GameResponse>>;
    public passGame(gameId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling passGame.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GameResponse>('put',`${this.basePath}/v1/game/${encodeURIComponent(String(gameId))}/pass`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * For the game having the id given in path, the action of putting a card on a game pile is triggered: If are preconditions are fulfilled, the requested action - including player id, hand card and game pile - is performed.
     * @param gameId @Parameter var gameId: String
     * @param body @Parameter var action: Action
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public playGame(gameId: string, body?: Action, observe?: 'body', reportProgress?: boolean): Observable<GameResponse>;
    public playGame(gameId: string, body?: Action, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GameResponse>>;
    public playGame(gameId: string, body?: Action, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GameResponse>>;
    public playGame(gameId: string, body?: Action, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling playGame.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<GameResponse>('put',`${this.basePath}/v1/game/${encodeURIComponent(String(gameId))}/play`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * For the game having the id given in path, the initialization is triggered: If preconditions fulfilled, change the game with given id to status &#x60;running&#x60;, distribute cards from shuffled draw pile, randomly select start player.
     * @param gameId @Parameter var gameId: String
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public startGame(gameId: string, observe?: 'body', reportProgress?: boolean): Observable<GameResponse>;
    public startGame(gameId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GameResponse>>;
    public startGame(gameId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GameResponse>>;
    public startGame(gameId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling startGame.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GameResponse>('put',`${this.basePath}/v1/game/${encodeURIComponent(String(gameId))}/start`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
